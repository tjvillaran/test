<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Space Area Boot</title>
    <style>
        body { margin: 0; display: flex; justify-content: center; align-items: center; height: 100vh; background: black; }
        canvas { border: 1px solid white; }
    </style>
</head>
<body>
    <canvas id="gameCanvas" width="800" height="600"></canvas>
    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        // Game constants
        const SHIP_SIZE = 20;
        const METEOR_RADIUS = 40;
        const BULLET_RADIUS = 2;
        const ROTATION_SPEED = 0.1;
        const THRUST = 0.1;
        const BULLET_SPEED = 5;
        const ACCELERATION_FACTOR = 0.1;

        // Game state
        let ships = [];
        let bullets = [];
        let meteors = [];
        let particles = [];  // For explosion effect
        let scores = [0, 0];

        // Player controls
        const controls = [
            { left: 'KeyA', right: 'KeyD', thrust: 'KeyW', shoot: 'KeyS' },
			{ left: 'ArrowLeft', right: 'ArrowRight', thrust: 'ArrowUp', shoot: 'Enter' }
            
        ];

        // Key states
        const keys = {};

        // Event listeners for key presses
        window.addEventListener('keydown', (e) => keys[e.code] = true);
        window.addEventListener('keyup', (e) => keys[e.code] = false);

        // Explosion sound
        const explosionSound = new Audio('explosion.mp3');  
		const shootSound = new Audio('shot.mp3'); 

        // Particle class for explosion
        class Particle {
            constructor(x, y, vx, vy, lifespan) {
                this.x = x;
                this.y = y;
                this.vx = vx;
                this.vy = vy;
                this.lifespan = lifespan;
            }

            update() {
                this.x += this.vx;
                this.y += this.vy;
                this.lifespan--;
            }

            draw() {
                ctx.beginPath();
                ctx.arc(this.x, this.y, 2, 0, Math.PI * 2);
                ctx.fillStyle = 'white';
                ctx.fill();
            }
        }

        // Ship class
        class Ship {
            constructor(x, y, angle, color, controls) {
                this.x = x;
                this.y = y;
                this.vx = 0;
                this.vy = 0;
                this.angle = angle;
                this.color = color;
                this.controls = controls;
                this.radius = SHIP_SIZE;
            }

            update() {
                if (keys[this.controls.left]) this.angle -= ROTATION_SPEED;
                if (keys[this.controls.right]) this.angle += ROTATION_SPEED;
                if (keys[this.controls.thrust]) {
                    this.vx += THRUST * Math.cos(this.angle);
                    this.vy += THRUST * Math.sin(this.angle);
                }
                if (keys[this.controls.shoot]) this.shoot();

                this.x += this.vx;
                this.y += this.vy;

                // Bounce off walls
                if (this.x < 0 || this.x > canvas.width) this.vx *= -1;
                if (this.y < 0 || this.y > canvas.height) this.vy *= -1;
            }

            shoot() {
				shootSound.play()
                if (!this.lastShot || Date.now() - this.lastShot > 900) {
                    const bullet = new Bullet(this.x, this.y, this.angle, this);
                    bullets.push(bullet);
                    this.lastShot = Date.now();
                }
            }

            draw() {
                ctx.save();
                ctx.translate(this.x, this.y);
                ctx.rotate(this.angle);
                ctx.beginPath();
                ctx.moveTo(SHIP_SIZE, 0);
                ctx.lineTo(-SHIP_SIZE / 2, -SHIP_SIZE / 2);
                ctx.lineTo(-SHIP_SIZE / 2, SHIP_SIZE / 2);
                ctx.closePath();
                ctx.fillStyle = this.color;
                ctx.fill();
                ctx.restore();
            }
        }

        // Bullet class
        class Bullet {
            constructor(x, y, angle, ship) {
                this.x = x;
                this.y = y;
                this.vx = BULLET_SPEED * Math.cos(angle);
                this.vy = BULLET_SPEED * Math.sin(angle);
                this.radius = BULLET_RADIUS;
                this.ship = ship;
            }

            update() {
                this.x += this.vx;
                this.y += this.vy;

                if (this.x < 0 || this.x > canvas.width || this.y < 0 || this.y > canvas.height) {
                    bullets = bullets.filter(b => b !== this);
                }
            }

            draw() {
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
                ctx.fillStyle = 'white';
                ctx.fill();
            }
        }

        // Meteor class
        class Meteor {
            constructor(x, y) {
                this.x = x;
                this.y = y;
                this.vx = 0;
                this.vy = 0;
                this.radius = METEOR_RADIUS;
            }

            update() {
                this.x += this.vx;
                this.y += this.vy;

                if (this.x - this.radius < 0 || this.x + this.radius > canvas.width) this.vx *= -1;
                if (this.y - this.radius < 0 || this.y + this.radius > canvas.height) this.vy *= -1;
            }

            draw() {
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
                ctx.fillStyle = 'gray';
                ctx.fill();
            }
        }

        // Collision detection
        function checkCollisions() {
            bullets.forEach(bullet => {
                ships.forEach(ship => {
                    if (ship !== bullet.ship && distance(bullet, ship) < ship.radius + bullet.radius) {
                        ship.vx += ACCELERATION_FACTOR * bullet.vx;
                        ship.vy += ACCELERATION_FACTOR * bullet.vy;
                        bullets = bullets.filter(b => b !== bullet);
                    }
                });
                meteors.forEach(meteor => {
                    if (distance(bullet, meteor) < meteor.radius + bullet.radius) {
                        meteor.vx += ACCELERATION_FACTOR * bullet.vx;
                        meteor.vy += ACCELERATION_FACTOR * bullet.vy;
                        bullets = bullets.filter(b => b !== bullet);
                    }
                });
            });

            ships.forEach(ship => {
                meteors.forEach(meteor => {
                    if (distance(ship, meteor) < ship.radius + meteor.radius) {
                        // Create explosion particles
                        for (let i = 0; i < 10; i++) {
                            const angle = Math.random() * Math.PI * 2;
                            const speed = Math.random() * 2 + 1;
                            const vx = speed * Math.cos(angle);
                            const vy = speed * Math.sin(angle);
                            const lifespan = 60;  // ~1 second at 60fps
                            particles.push(new Particle(ship.x, ship.y, vx, vy, lifespan));
                        }
                        // Play explosion sound
                        explosionSound.play();
						
						// Award point to the surviving player
                        const survivingShip = ships.find(s => s !== ship);
                        if (survivingShip) {
                            const winnerIndex = ships.indexOf(survivingShip);
                            scores[winnerIndex]++;
                        }
						
                        // Remove the ship
                        ships = ships.filter(s => s !== ship);
                        // Delay reset to show explosion
                        setTimeout(resetGame, 1000);
                    }
                });
            });
        }

        // Distance helper function
        function distance(obj1, obj2) {
            return Math.sqrt((obj1.x - obj2.x) ** 2 + (obj1.y - obj2.y) ** 2);
        }

        // Reset game state
        function resetGame() {
            ships = [
                new Ship(100, 300, 0, 'red', controls[0]),
                new Ship(700, 300, Math.PI, 'blue', controls[1])
            ];
            bullets = [];
            meteors = [
                new Meteor(400, 75),
                new Meteor(400, 225),
                new Meteor(400, 375),
                new Meteor(400, 525)
            ];
            particles = [];  // Clear particles
        }

        // Initial setup
        resetGame();

        // Game loop
        function gameLoop() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            ships.forEach(ship => {
                ship.update();
                ship.draw();
            });

            bullets.forEach(bullet => {
                bullet.update();
                bullet.draw();
            });

            meteors.forEach(meteor => {
                meteor.update();
                meteor.draw();
            });

            // Update and draw particles
            particles = particles.filter(particle => particle.lifespan > 0);
            particles.forEach(particle => {
                particle.update();
                particle.draw();
            });

            checkCollisions();

            // Draw scores
            ctx.fillStyle = 'white';
            ctx.font = '20px Arial';
            ctx.fillText(`Player 1: ${scores[0]}`, 10, 30);
            ctx.fillText(`Player 2: ${scores[1]}`, canvas.width - 100, 30);

            requestAnimationFrame(gameLoop);
        }

        gameLoop();
    </script>
</body>
</html>